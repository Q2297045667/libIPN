/*
 * Inventory Profiles Next
 *
 *   Copyright (c) 2025 Plamen K. Kosseff <p.kosseff@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package org.anti_ad.mc.libipn.buildsrc

import org.gradle.api.DefaultTask
import org.gradle.api.invocation.Gradle
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.JavaPluginExtension
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction

abstract class ModInfoGeneratorTask(): DefaultTask() {

    @get:Input
    abstract var packageName: String

    @get:Input
    abstract var modId: String

    @get:Input
    abstract var modName: String

    @get:Input
    abstract var modVersion: String

    @get:Input
    abstract var modLoader: String

    @get:Input
    val CURSEFORGE_URL: String
        get() = "https://www.curseforge.com/minecraft/mc-mods/$modId"

    @get:Input
    val MODRINTH_URL: String
        get() = "https://modrinth.com/mod/$modId"

    @get:OutputDirectory
    var targetDir = project.layout.buildDirectory.dir("generated/sources/libIPN/main/kotlin")

    private lateinit var template: String

    init {
        project.pluginManager.apply(JavaPlugin::class.java)

        project.tasks.named("compileKotlin").configure {
            dependsOn(this@ModInfoGeneratorTask)
        }
        val realTarget = targetDir.get()
        realTarget.asFile.deleteRecursively()
        realTarget.asFile.mkdirs()
        project.afterEvaluate {
            extensions.getByType(JavaPluginExtension::class.java).sourceSets.getByName("main") {
                this.java.srcDirs(targetDir)
            }
        }

    }


    @TaskAction
    fun invoke() {

        template = """
        /*
         * This file was generated by libIPN Gradle.
         */
        package $packageName
        
        object ModInfo {
            
            const val MOD_ID = "${modId.removeSurrounding("\"")}"
            const val MOD_NAME = "${modName.removeSurrounding("\"")}"
            const val MOD_VERSION = "${modVersion.removeSurrounding("\"")}"
            const val MOD_LOADER = "${modLoader.removeSurrounding("\"")}"
            
            const val CURSEFORGE_URL = "$CURSEFORGE_URL"
            const val MODRINTH_URL = "$MODRINTH_URL"
        }
        """.trimIndent()

        val realTarget = targetDir.get().file(packageName.replace(".", "/"))
        realTarget.asFile.deleteRecursively()
        realTarget.asFile.mkdirs()
        realTarget.asFile.resolve("ModInfo.kt").writeText(template)
    }


}
